import telebot
import time
import logging
from telebot import apihelper
from telebot.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from config import BOT_TOKEN, ADMIN_ID
from database import add_schedule, get_all_schedules, get_schedule, add_user, get_all_users, delete_schedule

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

apihelper.proxy = None
bot = telebot.TeleBot(BOT_TOKEN)

# –†–∞–∑–¥–µ–ª—å–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
admin_schedule_data = {}
admin_broadcast_data = {}

print(f"üîß DEBUG: ADMIN_ID = {ADMIN_ID}")

def main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    keyboard.add('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
    keyboard.add('üì¢ –†–∞—Å—Å—ã–ª–∫–∞')
    return keyboard

def admin_confirm_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
    return keyboard

def broadcast_confirm_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add('‚úÖ –†–∞–∑–æ—Å–ª–∞—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
    return keyboard

def dates_keyboard():
    schedules = get_all_schedules()
    keyboard = InlineKeyboardMarkup()
    for date in sorted(schedules.keys(), reverse=True):
        keyboard.add(InlineKeyboardButton(date, callback_data=date))
    return keyboard

def delete_dates_keyboard():
    schedules = get_all_schedules()
    keyboard = InlineKeyboardMarkup()
    for date in sorted(schedules.keys(), reverse=True):
        keyboard.add(InlineKeyboardButton(f"üóëÔ∏è {date}", callback_data=f"delete_{date}"))
    return keyboard

# –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –†–ê–°–°–´–õ–ö–ò
def broadcast_message(photo_id=None, text=None, message_type="text"):
    users = get_all_users()
    successful = 0
    failed = 0
    
    print(f"üîî –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    
    for user_id in users:
        try:
            if message_type == "photo" and photo_id:
                bot.send_photo(user_id, photo_id, caption=text)
            else:
                bot.send_message(user_id, text)
            successful += 1
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {user_id}")
        except Exception as e:
            failed += 1
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")
    
    print(f"üìä –ò—Ç–æ–≥ —Ä–∞—Å—Å—ã–ª–∫–∏: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫")
    return successful, failed

# –ö–û–ú–ê–ù–î–ê START - –ü–ï–†–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
@bot.message_handler(commands=['start'])
def start_command(message):
    print(f"üéØ /start –æ—Ç {message.from_user.id}")
    add_user(message.chat.id)
    
    if message.chat.type == 'private':
        welcome_text = """–ü—Ä–∏–≤–µ—Ç {name}! –Ø –±–æ—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º. –ó–¥–µ—Å—å –±—É–¥—É—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –®–∫–æ–ª—ã ‚Ññ7.

–í –±–æ—Ç–µ –µ—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ —á—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞ 7 –∫–ª–∞—Å—Å—ã, –Ω–æ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥—É—Ç –Ω–∞ –≤—Å–µ

–í—Å–µ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤—ã –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏–ª–∏ –Ω–∞ –º–∞–∫—Å)

by @qwer4ik777""".format(name=message.from_user.first_name)
        
        bot.send_message(message.chat.id, welcome_text, reply_markup=main_keyboard())

# –ö–û–ú–ê–ù–î–ê ADMIN - –í–¢–û–†–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    print(f"üéØ –ö–æ–º–∞–Ω–¥–∞ /admin –ø–æ–ª—É—á–µ–Ω–∞! –û—Ç: {message.from_user.id}")
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    # –í—ã—Ö–æ–¥–∏–º –∏–∑ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–æ–≤
    if message.chat.id in admin_broadcast_data:
        del admin_broadcast_data[message.chat.id]
    
    admin_schedule_data[message.chat.id] = {'step': 'waiting_photo'}
    bot.send_message(message.chat.id, "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:")

# –ö–û–ú–ê–ù–î–ê DEBUG
@bot.message_handler(commands=['debug'])
def debug_command(message):
    print(f"üéØ –ö–æ–º–∞–Ω–¥–∞ /debug –æ—Ç {message.from_user.id}")
    users = get_all_users()
    schedules = get_all_schedules()
    
    info = f"""
üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:
User ID: {message.from_user.id}
ADMIN_ID: {ADMIN_ID}
–°—Ç–∞—Ç—É—Å: {'‚úÖ –ê–î–ú–ò–ù' if message.from_user.id == ADMIN_ID else '‚ùå –ù–ï –ê–î–ú–ò–ù'}
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}
–†–∞—Å–ø–∏—Å–∞–Ω–∏–π: {len(schedules)}
"""
    bot.send_message(message.chat.id, info)

# –ö–ù–û–ü–ö–ê –†–ê–°–°–´–õ–ö–ê - –¢–†–ï–¢–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö
@bot.message_handler(func=lambda message: message.text == 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞')
def start_broadcast(message):
    print(f"üéØ –ö–Ω–æ–ø–∫–∞ '–†–∞—Å—Å—ã–ª–∫–∞' –æ—Ç {message.from_user.id}")
    
    # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –±—ã–ª
    if message.chat.id in admin_schedule_data:
        del admin_schedule_data[message.chat.id]
    
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    admin_broadcast_data[message.chat.id] = {'step': 'waiting_message'}
    bot.send_message(
        message.chat.id,
        "üì¢ –†–ï–ñ–ò–ú –†–ê–°–°–´–õ–ö–ò:\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ):",
        reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add('‚ùå –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏')
    )

# –ö–ù–û–ü–ö–ê –†–ê–°–ü–ò–°–ê–ù–ò–ï
@bot.message_handler(func=lambda message: message.text == 'üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
def show_schedule_menu(message):
    print(f"üéØ –ö–Ω–æ–ø–∫–∞ '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ' –æ—Ç {message.from_user.id}")
    schedules = get_all_schedules()
    if not schedules:
        bot.send_message(message.chat.id, "üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        return
    bot.send_message(message.chat.id, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=dates_keyboard())

# –ö–ù–û–ü–ö–ê –£–î–ê–õ–ò–¢–¨ –†–ê–°–ü–ò–°–ê–ù–ò–ï
@bot.message_handler(func=lambda message: message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
def show_delete_menu(message):
    print(f"üéØ –ö–Ω–æ–ø–∫–∞ '–£–¥–∞–ª–∏—Ç—å' –æ—Ç {message.from_user.id}")
    if message.from_user.id != ADMIN_ID:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    schedules = get_all_schedules()
    if not schedules:
        bot.send_message(message.chat.id, "üì≠ –ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    bot.send_message(message.chat.id, "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=delete_dates_keyboard())

# –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–û–ö –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –†–ê–°–°–´–õ–ö–ò - –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í–´–®–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –¢–ï–ö–°–¢–ê
@bot.message_handler(func=lambda message: message.text in ['‚úÖ –†–∞–∑–æ—Å–ª–∞—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'])
def handle_broadcast_confirmation(message):
    print(f"üéØ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏: '{message.text}' –æ—Ç {message.from_user.id}")
    
    if message.from_user.id != ADMIN_ID or message.chat.id not in admin_broadcast_data:
        print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: user_id={message.from_user.id}, in_data={message.chat.id in admin_broadcast_data}")
        return
    
    data = admin_broadcast_data[message.chat.id]
    
    if message.text == '‚úÖ –†–∞–∑–æ—Å–ª–∞—Ç—å':
        print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É. –î–∞–Ω–Ω—ã–µ: {data}")
        bot.send_message(message.chat.id, "üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
        
        if data['type'] == 'photo':
            successful, failed = broadcast_message(
                photo_id=data['photo_id'],
                text=data['text'],
                message_type="photo"
            )
        else:
            successful, failed = broadcast_message(
                text=data['text'],
                message_type="text"
            )
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {successful}\n–û—à–∏–±–æ–∫: {failed}",
            reply_markup=main_keyboard()
        )
    else:
        bot.send_message(message.chat.id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_keyboard())
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    if message.chat.id in admin_broadcast_data:
        del admin_broadcast_data[message.chat.id]

# –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û –î–õ–Ø –†–ê–°–°–´–õ–ö–ò –ò –†–ê–°–ü–ò–°–ê–ù–ò–Ø
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    print(f"üéØ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {message.from_user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏
    if (message.from_user.id == ADMIN_ID and 
        message.chat.id in admin_broadcast_data and 
        admin_broadcast_data[message.chat.id].get('step') == 'waiting_message'):
        
        print("üîÑ –§–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        admin_broadcast_data[message.chat.id]['photo_id'] = message.photo[-1].file_id
        admin_broadcast_data[message.chat.id]['text'] = message.caption or ""
        admin_broadcast_data[message.chat.id]['type'] = 'photo'
        admin_broadcast_data[message.chat.id]['step'] = 'waiting_confirmation'
        
        preview_text = "üì∑ –§–æ—Ç–æ" + (f" —Å –ø–æ–¥–ø–∏—Å—å—é: {message.caption}" if message.caption else "")
        users_count = len(get_all_users())
        
        bot.send_message(
            message.chat.id,
            f"üì¢ –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –†–ê–°–°–´–õ–ö–ò:\n\n{preview_text}\n\n–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {users_count}",
            reply_markup=broadcast_confirm_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if (message.from_user.id == ADMIN_ID and 
        message.chat.id in admin_schedule_data and 
        admin_schedule_data[message.chat.id].get('step') == 'waiting_photo'):
        
        print("üîÑ –§–æ—Ç–æ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
        admin_schedule_data[message.chat.id]['photo_id'] = message.photo[-1].file_id
        admin_schedule_data[message.chat.id]['text'] = message.caption or ""
        admin_schedule_data[message.chat.id]['step'] = 'waiting_date'
        
        bot.send_message(message.chat.id, "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return

# –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê –î–õ–Ø –†–ê–°–°–´–õ–ö–ò –ò –†–ê–°–ü–ò–°–ê–ù–ò–Ø
@bot.message_handler(content_types=['text'])
def handle_text(message):
    print(f"üì® –¢–µ–∫—Å—Ç: '{message.text}' –æ—Ç {message.from_user.id}")
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text and message.text.startswith('/'):
        print(f"‚ö° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É: {message.text}")
        return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–Ω–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ)
    if message.text in ['‚úÖ –†–∞–∑–æ—Å–ª–∞—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']:
        print(f"‚ö° –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {message.text}")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    if (message.from_user.id == ADMIN_ID and 
        message.chat.id in admin_broadcast_data and 
        admin_broadcast_data[message.chat.id].get('step') == 'waiting_message'):
        
        print("üîÑ –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É
        if message.text == '‚ùå –û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏':
            if message.chat.id in admin_broadcast_data:
                del admin_broadcast_data[message.chat.id]
            bot.send_message(message.chat.id, "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_keyboard())
            return
        
        admin_broadcast_data[message.chat.id]['text'] = message.text
        admin_broadcast_data[message.chat.id]['type'] = 'text'
        admin_broadcast_data[message.chat.id]['step'] = 'waiting_confirmation'
        
        users_count = len(get_all_users())
        
        bot.send_message(
            message.chat.id,
            f"üì¢ –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –†–ê–°–°–´–õ–ö–ò:\n\nüìù –¢–µ–∫—Å—Ç: {message.text}\n\n–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {users_count}",
            reply_markup=broadcast_confirm_keyboard()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (–≤–≤–æ–¥ –¥–∞—Ç—ã)
    if (message.from_user.id == ADMIN_ID and 
        message.chat.id in admin_schedule_data and 
        admin_schedule_data[message.chat.id].get('step') == 'waiting_date'):
        
        print(f"üéØ –î–∞—Ç–∞ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {message.text}")
        admin_schedule_data[message.chat.id]['date'] = message.text
        admin_schedule_data[message.chat.id]['step'] = 'waiting_confirmation'
        
        bot.send_message(
            message.chat.id, 
            f"‚úÖ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {message.text}?", 
            reply_markup=admin_confirm_keyboard()
        )
        return

# –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –î–û–ë–ê–í–õ–ï–ù–ò–Ø –†–ê–°–ü–ò–°–ê–ù–ò–Ø
@bot.message_handler(func=lambda message: message.text in ['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å'])
def handle_schedule_confirmation(message):
    print(f"üéØ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {message.text}")
    if message.from_user.id != ADMIN_ID or message.chat.id not in admin_schedule_data:
        return
    
    data = admin_schedule_data[message.chat.id]
    
    if message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        if all(k in data for k in ['date', 'photo_id']):
            add_schedule(data['date'], data['photo_id'], data['text'])
            successful, failed = broadcast_message(
                photo_id=data['photo_id'],
                text=f"üìÖ –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {data['date']}!\n\n{data['text']}",
                message_type="photo"
            )
            bot.send_message(
                message.chat.id, 
                f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –†–∞—Å—Å—ã–ª–∫–∞: {successful} —É—Å–ø–µ—à–Ω–æ, {failed} –æ—à–∏–±–æ–∫", 
                reply_markup=main_keyboard()
            )
        else:
            bot.send_message(message.chat.id, "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ", reply_markup=main_keyboard())
    else:
        bot.send_message(message.chat.id, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if message.chat.id in admin_schedule_data:
        del admin_schedule_data[message.chat.id]

# INLINE –ö–ù–û–ü–ö–ò
@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    print(f"üéØ Inline –∫–Ω–æ–ø–∫–∞: {call.data}")
    if call.data.startswith('delete_'):
        if call.from_user.id != ADMIN_ID:
            bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
            return
        date = call.data.replace('delete_', '')
        if delete_schedule(date):
            bot.answer_callback_query(call.id, f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {date}")
            bot.edit_message_text(
                f"üóëÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {date} —É–¥–∞–ª–µ–Ω–æ", 
                call.message.chat.id, 
                call.message.message_id
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
    else:
        schedule = get_schedule(call.data)
        if schedule:
            bot.send_photo(
                call.message.chat.id, 
                schedule['photo_id'], 
                caption=f"üìÖ {call.data}\n{schedule['text']}"
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

if __name__ == '__main__':
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π...")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫–∏ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–µ—Å—Å–∏–∏
    try:
        import requests
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        requests.get(f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates?offset=-1", timeout=5)
        print("‚úÖ –°–±—Ä–æ—à–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–µ—Å—Å–∏–∏")
    except:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        bot_info = bot.get_me()
        print(f"‚úÖ –ë–æ—Ç @{bot_info.username} –ø–æ–¥–∫–ª—é—á–µ–Ω!")
        print(f"üÜî ID –±–æ—Ç–∞: {bot_info.id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º polling
    while True:
        try:
            print("üîÑ –ó–∞–ø—É—Å–∫ polling...")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º skip_pending —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.polling(
                none_stop=True, 
                timeout=30,
                long_polling_timeout=30,
                skip_pending=True
            )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ polling: {e}")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)